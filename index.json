{
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome to the Steel Engine Documentaiton! | Steel Engine",
    "keywords": "Welcome to the Steel Engine Documentaiton! Expand the SteelEngine namespace on the left. Thank you for using the Steel Engine! ❤️"
  },
  "api/SteelEngine.EngineProperties.html": {
    "href": "api/SteelEngine.EngineProperties.html",
    "title": "Struct EngineProperties | Steel Engine",
    "keywords": "Struct EngineProperties Namespace SteelEngine Assembly SteelEngine.dll This is used to define the 'startup' parameters. An EngineProperties object is passed in the Steel.Preload function and returned before starting the engine. public struct EngineProperties Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields BackgroundColor The background color to draw when cleared. public Color BackgroundColor Field Value Color Height The height of the window. public int Height Field Value int Title The title of the window. public string Title Field Value string Version (optional) The version of the application. public string? Version Field Value string Width The width of the window. public int Width Field Value int"
  },
  "api/SteelEngine.html": {
    "href": "api/SteelEngine.html",
    "title": "Namespace SteelEngine | Steel Engine",
    "keywords": "Namespace SteelEngine Classes Renderer Used to render shapes into the view. Shader SteelEngine Structs EngineProperties This is used to define the 'startup' parameters. An EngineProperties object is passed in the Steel.Preload function and returned before starting the engine."
  },
  "api/SteelEngine.Lua.Color.html": {
    "href": "api/SteelEngine.Lua.Color.html",
    "title": "Class Color | Steel Engine",
    "keywords": "Class Color Namespace SteelEngine.Lua Assembly SteelEngine.dll A typical Color class used to store rgba values. public class Color Inheritance object Color Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Color(int, int, int) Creates a new Color object with the rgb value format. The Alpha will default to 255. public Color(int _r, int _g, int _b) Parameters _r int _g int _b int Color(int, int, int, int) Creates a new Color object with the rgba value format. public Color(int _r, int _g, int _b, int _a) Parameters _r int _g int _b int _a int Fields a The Alpha channel. public int a Field Value int b The Blue channel. public int b Field Value int g The Green channel. public int g Field Value int r The Red channel. public int r Field Value int Methods ToColor4() Returns in OpenTK.Mathematics.Color form public Color4 ToColor4() Returns Color4 WithAlpha(int) Copies itself into a new color and takes the alpha value public Color WithAlpha(int _a) Parameters _a int Returns Color"
  },
  "api/SteelEngine.Lua.CursorState.html": {
    "href": "api/SteelEngine.Lua.CursorState.html",
    "title": "Enum CursorState | Steel Engine",
    "keywords": "Enum CursorState Namespace SteelEngine.Lua Assembly SteelEngine.dll The state of the Cursor when the application is focused. public enum CursorState Fields HIDDEN = 1 Cursor is hidden when inside the window but is not locked to the window. LOCKED = 2 Cursor is hidden and locked to the window. NONE = 0 Cursor is visible and not locked to the window. Default setting."
  },
  "api/SteelEngine.Lua.Draw.html": {
    "href": "api/SteelEngine.Lua.Draw.html",
    "title": "Class Draw | Steel Engine",
    "keywords": "Class Draw Namespace SteelEngine.Lua Assembly SteelEngine.dll Used for sending graphics to the renderer. public static class Draw Inheritance object Draw Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DrawCircle(float, float, float, Color, int) Draws a circle at the position. public static void DrawCircle(float x, float y, float radius, Color color, int segments = 16) Parameters x float y float radius float color Color segments int DrawRectangle(float, float, float, float, Color) Draws a rectangle at the position. public static void DrawRectangle(float x, float y, float width, float height, Color color) Parameters x float y float width float height float color Color DrawRoundedRectangle(float, float, float, float, float, Color, int) Draws a rectangle at the position, taking in the roundness. public static void DrawRoundedRectangle(float roundness, float x, float y, float width, float height, Color color, int segmentsPerCorner = 8) Parameters roundness float This is a 0.0f-1.0f value, measures the amount of roundness the corners have. x float y float width float height float color Color segmentsPerCorner int"
  },
  "api/SteelEngine.Lua.Global.html": {
    "href": "api/SteelEngine.Lua.Global.html",
    "title": "Class Global | Steel Engine",
    "keywords": "Class Global Namespace SteelEngine.Lua Assembly SteelEngine.dll Represents Lua's global class. public class Global Inheritance object Global Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Clamp(float, float, float) Clamps a value between a min and max. public static float Clamp(float value, float min, float max) Parameters value float min float max float Returns float Lerp(float, float, float) Returns a lerped value from a to b using t as Time. public static float Lerp(float a, float b, float t) Parameters a float b float t float Returns float ScrH() The height of the viewport screen. public static float ScrH() Returns float ScrW() The width of the viewport screen. public static float ScrW() Returns float"
  },
  "api/SteelEngine.Lua.html": {
    "href": "api/SteelEngine.Lua.html",
    "title": "Namespace SteelEngine.Lua | Steel Engine",
    "keywords": "Namespace SteelEngine.Lua Classes Color A typical Color class used to store rgba values. Draw Used for sending graphics to the renderer. Global Represents Lua's global class. Input Used for handling user input. KeyCode Time This is used to bring all the time outputs into one class. Vector2 Represents a generic 2D vector array. Window This is used to call functions to the Game Window. Enums CursorState The state of the Cursor when the application is focused."
  },
  "api/SteelEngine.Lua.Input.html": {
    "href": "api/SteelEngine.Lua.Input.html",
    "title": "Class Input | Steel Engine",
    "keywords": "Class Input Namespace SteelEngine.Lua Assembly SteelEngine.dll Used for handling user input. public static class Input Inheritance object Input Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Event_OnKeyDown(Keys) This method is called when a key is pressed. public static void Event_OnKeyDown(Keys key) Parameters key Keys Event_OnKeyUp(Keys) This method is called when a key is released. public static void Event_OnKeyUp(Keys key) Parameters key Keys Event_OnMouseDown(MouseButton) This event is called when the mouse is down. public static void Event_OnMouseDown(MouseButton button) Parameters button MouseButton Event_OnMouseMove(Vector2, Vector2) This event is called when the mouse is moved. public static void Event_OnMouseMove(Vector2 position, Vector2 delta) Parameters position Vector2 delta Vector2 Event_OnMouseUp(MouseButton) This event is called when the mouse is up. public static void Event_OnMouseUp(MouseButton button) Parameters button MouseButton Event_OnMouseWheel(float, float) This event is called when the mouse wheel is moved. public static void Event_OnMouseWheel(float x, float y) Parameters x float y float GetKey(int) Returns if the key is being pressed. public static bool GetKey(int key) Parameters key int Use a KeyCode. Returns bool GetKeyDown(int) Retuns if the key was pressed. public static bool GetKeyDown(int key) Parameters key int Use a KeyCode Returns bool GetMouse(int) Returns if the mouse button is currently down public static bool GetMouse(int button) Parameters button int Returns bool GetMouseDelta() Returns the mouse delta. public static Vector2 GetMouseDelta() Returns Vector2 GetMouseDown(int) Returns if the mouse button was pressed. public static bool GetMouseDown(int button) Parameters button int Returns bool GetMousePosition() Returns the mouse position. public static Vector2 GetMousePosition() Returns Vector2 GetScrollOffset() Returns the scrollwheel's scroll offset. public static Vector2 GetScrollOffset() Returns Vector2 Update() Called every frame to update the input state. public static void Update()"
  },
  "api/SteelEngine.Lua.KeyCode.html": {
    "href": "api/SteelEngine.Lua.KeyCode.html",
    "title": "Class KeyCode | Steel Engine",
    "keywords": "Class KeyCode Namespace SteelEngine.Lua Assembly SteelEngine.dll public static class KeyCode Inheritance object KeyCode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields A public const int A = 65 Field Value int Apostrophe public const int Apostrophe = 39 Field Value int B public const int B = 66 Field Value int Backslash public const int Backslash = 92 Field Value int Backspace public const int Backspace = 92 Field Value int C public const int C = 67 Field Value int CapsLock public const int CapsLock = 280 Field Value int Comma public const int Comma = 44 Field Value int D public const int D = 68 Field Value int Delete public const int Delete = 261 Field Value int Down public const int Down = 264 Field Value int E public const int E = 69 Field Value int End public const int End = 269 Field Value int Enter public const int Enter = 257 Field Value int Equal public const int Equal = 61 Field Value int Escape public const int Escape = 256 Field Value int F public const int F = 70 Field Value int F1 public const int F1 = 290 Field Value int F10 public const int F10 = 299 Field Value int F11 public const int F11 = 300 Field Value int F12 public const int F12 = 301 Field Value int F13 public const int F13 = 302 Field Value int F14 public const int F14 = 303 Field Value int F15 public const int F15 = 304 Field Value int F16 public const int F16 = -1 Field Value int F17 public const int F17 = -1 Field Value int F18 public const int F18 = -1 Field Value int F19 public const int F19 = -1 Field Value int F2 public const int F2 = 291 Field Value int F20 public const int F20 = -1 Field Value int F21 public const int F21 = -1 Field Value int F22 public const int F22 = -1 Field Value int F23 public const int F23 = -1 Field Value int F24 public const int F24 = -1 Field Value int F3 public const int F3 = 292 Field Value int F4 public const int F4 = 293 Field Value int F5 public const int F5 = 294 Field Value int F6 public const int F6 = 295 Field Value int F7 public const int F7 = 296 Field Value int F8 public const int F8 = 297 Field Value int F9 public const int F9 = 298 Field Value int G public const int G = 71 Field Value int GraveAccent public const int GraveAccent = 96 Field Value int H public const int H = 72 Field Value int Home public const int Home = 268 Field Value int I public const int I = 73 Field Value int Insert public const int Insert = 260 Field Value int J public const int J = 74 Field Value int K public const int K = 75 Field Value int Keypad0 public const int Keypad0 = 320 Field Value int Keypad1 public const int Keypad1 = 321 Field Value int Keypad2 public const int Keypad2 = 322 Field Value int Keypad3 public const int Keypad3 = 323 Field Value int Keypad4 public const int Keypad4 = 324 Field Value int Keypad5 public const int Keypad5 = 325 Field Value int Keypad6 public const int Keypad6 = 326 Field Value int Keypad7 public const int Keypad7 = 327 Field Value int Keypad8 public const int Keypad8 = 328 Field Value int Keypad9 public const int Keypad9 = 329 Field Value int KeypadAdd public const int KeypadAdd = 334 Field Value int KeypadDecimal public const int KeypadDecimal = 330 Field Value int KeypadDivide public const int KeypadDivide = 331 Field Value int KeypadEnter public const int KeypadEnter = -1 Field Value int KeypadMultiply public const int KeypadMultiply = 332 Field Value int KeypadSubtract public const int KeypadSubtract = 333 Field Value int L public const int L = 76 Field Value int Left public const int Left = 263 Field Value int LeftAlt public const int LeftAlt = 342 Field Value int LeftBracket public const int LeftBracket = 91 Field Value int LeftControl public const int LeftControl = 341 Field Value int LeftShift public const int LeftShift = 340 Field Value int LeftWindows public const int LeftWindows = -1 Field Value int M public const int M = 77 Field Value int Minus public const int Minus = 45 Field Value int N public const int N = 78 Field Value int Num0 public const int Num0 = 48 Field Value int Num1 public const int Num1 = 49 Field Value int Num2 public const int Num2 = 50 Field Value int Num3 public const int Num3 = 51 Field Value int Num4 public const int Num4 = 52 Field Value int Num5 public const int Num5 = 53 Field Value int Num6 public const int Num6 = 54 Field Value int Num7 public const int Num7 = 55 Field Value int Num8 public const int Num8 = 56 Field Value int Num9 public const int Num9 = 57 Field Value int NumLock public const int NumLock = 282 Field Value int O public const int O = 79 Field Value int P public const int P = 80 Field Value int PageDown public const int PageDown = 267 Field Value int PageUp public const int PageUp = 266 Field Value int Pause public const int Pause = 284 Field Value int Period public const int Period = 46 Field Value int PrintScreen public const int PrintScreen = -1 Field Value int Q public const int Q = 81 Field Value int R public const int R = 82 Field Value int Right public const int Right = 262 Field Value int RightAlt public const int RightAlt = 346 Field Value int RightBracket public const int RightBracket = 93 Field Value int RightControl public const int RightControl = 345 Field Value int RightShift public const int RightShift = 344 Field Value int RightWindows public const int RightWindows = -1 Field Value int S public const int S = 83 Field Value int ScrollLock public const int ScrollLock = 281 Field Value int Semicolon public const int Semicolon = 59 Field Value int Slash public const int Slash = 47 Field Value int Space public const int Space = 32 Field Value int T public const int T = 84 Field Value int Tab public const int Tab = 258 Field Value int U public const int U = 85 Field Value int Unknown public const int Unknown = -1 Field Value int Up public const int Up = 265 Field Value int V public const int V = 86 Field Value int W public const int W = 87 Field Value int World1 public const int World1 = -1 Field Value int World2 public const int World2 = -1 Field Value int X public const int X = 88 Field Value int Y public const int Y = 89 Field Value int Z public const int Z = 90 Field Value int"
  },
  "api/SteelEngine.Lua.Time.html": {
    "href": "api/SteelEngine.Lua.Time.html",
    "title": "Class Time | Steel Engine",
    "keywords": "Class Time Namespace SteelEngine.Lua Assembly SteelEngine.dll This is used to bring all the time outputs into one class. public class Time Inheritance object Time Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetDeltaTime() Returns the amount of time it took to render the last frame in seconds. public static float GetDeltaTime() Returns float GetTime() Returns the amount of time the appliction has been running. public static double GetTime() Returns double"
  },
  "api/SteelEngine.Lua.Vector2.html": {
    "href": "api/SteelEngine.Lua.Vector2.html",
    "title": "Class Vector2 | Steel Engine",
    "keywords": "Class Vector2 Namespace SteelEngine.Lua Assembly SteelEngine.dll Represents a generic 2D vector array. public class Vector2 Inheritance object Vector2 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Vector2() Create a Vector2 object, starting at 0,0. public Vector2() Vector2(float, float) Create a Vector2 object with arguments. public Vector2(float _x, float _y) Parameters _x float _y float Fields x The X position. public float x Field Value float y The Y position. public float y Field Value float"
  },
  "api/SteelEngine.Lua.Window.html": {
    "href": "api/SteelEngine.Lua.Window.html",
    "title": "Class Window | Steel Engine",
    "keywords": "Class Window Namespace SteelEngine.Lua Assembly SteelEngine.dll This is used to call functions to the Game Window. public class Window Inheritance object Window Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Close() Terminates the application. public static void Close() GetCursorState() Returns the current Cursor State. public static CursorState GetCursorState() Returns CursorState GetFocused() Returns true if the game is the focused window. public static bool GetFocused() Returns bool GetFullscreen() Returns true if the game is running in Fullscreen mode. public static bool GetFullscreen() Returns bool GetSize() Returns the width and height of the window. public static (int, int) GetSize() Returns (int, int) SetCursorState(CursorState) Sets the window's cursor state. public static void SetCursorState(CursorState state) Parameters state CursorState"
  },
  "api/SteelEngine.Renderer.html": {
    "href": "api/SteelEngine.Renderer.html",
    "title": "Class Renderer | Steel Engine",
    "keywords": "Class Renderer Namespace SteelEngine Assembly SteelEngine.dll Used to render shapes into the view. public static class Renderer Inheritance object Renderer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DrawPoly(float[], Color) Draws a polygon to the screen public static void DrawPoly(float[] vertices, Color color) Parameters vertices float[] color Color Event_OnWindowResize(int, int) This event is called internally when the window is resized. public static void Event_OnWindowResize(int screenWidth, int screenHeight) Parameters screenWidth int screenHeight int Initialize(int, int) Called internally to initialize the renderer. public static void Initialize(int screenWidth, int screenHeight) Parameters screenWidth int screenHeight int"
  },
  "api/SteelEngine.Shader.html": {
    "href": "api/SteelEngine.Shader.html",
    "title": "Class Shader | Steel Engine",
    "keywords": "Class Shader Namespace SteelEngine Assembly SteelEngine.dll public class Shader Inheritance object Shader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Shader(string, string) public Shader(string vertPath, string fragPath) Parameters vertPath string fragPath string Fields Handle public readonly int Handle Field Value int Methods GetAttribLocation(string) public int GetAttribLocation(string attribName) Parameters attribName string Returns int SetFloat(string, float) Set a uniform float on this shader. public void SetFloat(string name, float data) Parameters name string The name of the uniform data float The data to set SetInt(string, int) Set a uniform int on this shader. public void SetInt(string name, int data) Parameters name string The name of the uniform data int The data to set SetMatrix4(string, Matrix4) Set a uniform Matrix4 on this shader public void SetMatrix4(string name, Matrix4 data) Parameters name string The name of the uniform data Matrix4 The data to set Remarks The matrix is transposed before being sent to the shader. SetVector3(string, Vector3) Set a uniform Vector3 on this shader. public void SetVector3(string name, Vector3 data) Parameters name string The name of the uniform data Vector3 The data to set Use() public void Use()"
  },
  "api/SteelEngine.SteelEngine.html": {
    "href": "api/SteelEngine.SteelEngine.html",
    "title": "Class SteelEngine | Steel Engine",
    "keywords": "Class SteelEngine Namespace SteelEngine Assembly SteelEngine.dll public class SteelEngine Inheritance object SteelEngine Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Main(string[]) public static void Main(string[] args) Parameters args string[]"
  },
  "articles/getting_started.html": {
    "href": "articles/getting_started.html",
    "title": "1. Getting Started | Steel Engine",
    "keywords": "1. Getting Started Create a new folder and inside it, create a new file main.lua. You will need four functions, as defined below. -- Called before the game is loaded with the EngineProperties object. -- The EngineProperties object can be modifed and must be returned to the engine. function Steel.Preload(engineProperties) engineProperties.Width = 1000 engineProperties.Height = 740 return engineProperties end function Steel.Load() -- called when the game is initially loaded end function Steel.Update(dt) -- called once every frame end function Steel.Render() -- called once every frame, for rendering. end"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Welcome to the Steel Engine Documentaiton! | Steel Engine",
    "keywords": "Welcome to the Steel Engine Documentaiton! Thank you for using the Steel Engine! ❤️"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Steel Engine",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}